// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  passwordHash   String
  role           Role
  name           String
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  feedbacks      Feedback[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Restaurant {
  id          String          @id @default(uuid())
  name        String
  location    String
  users       User[]
  categories  MenuCategory[]
  menuItems   MenuItem[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model MenuCategory {
  id           String       @id @default(uuid())
  name         String
  orderIndex   Int
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  items        MenuItem[]
  createdAt    DateTime     @default(now())
}

model MenuItem {
  id            String           @id @default(uuid())
  name          String
  description   String
  price         Float
  imageUrl      String
  isAvailable   Boolean          @default(true)
  category      MenuCategory     @relation(fields: [categoryId], references: [id])
  categoryId    String
  restaurant    Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  availability  MenuAvailability[]
  feedbacks     Feedback[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model MenuAvailability {
  id         String     @id @default(uuid())
  menuItem   MenuItem   @relation(fields: [menuItemId], references: [id])
  menuItemId String
  dayOfWeek  DayOfWeek
  startTime  String
  endTime    String
}

model Feedback {
  id         String    @id @default(uuid())
  rating     Int
  comment    String
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
}
